swagger: '2.0'
info:
  version: 1.0.0
  title: User
  description: User Adapter
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
- name: user
  description: Everything about User
schemes:
- https
- http
paths:
  /v1/users/:
    post:
      tags:
      - user
      summary: Upsert user
      description: Registry user
      operationId: upsertUser
      produces:
      - application/json
      parameters:
      - in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        '200':
          description: OK
          schema:
            type: string
            description: idUser
        '400':
          description: 'Bad request, validation error'
        '500':
          description: Internal Server Error
  /v1/users/login:
    get:
      tags:
      - user
      summary: Login user
      description: Loggin user
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - in: query
        name: username
        required: true
        type: string
      - in: query
        name: password
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
            description: Login successfull
        '500':
          description: Internal Server Error
  /v1/users/logout:
    get:
      tags:
      - user
      summary: Logout user
      description: Logout current user
      operationId: logoutUser
      produces:
      - application/json
      responses:
        default:
          description: Logout successfull
  '/v1/users/{username}':
    get:
      tags:
      - user
      summary: Get user by username
      operationId: getUserByUsername
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        required: true
        type: string
      responses:
        '200':
          description: succesfull operation
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Invalid username supplied
        '500':
          description: Internal Server Error
    delete:
      tags:
      - user
      summary: Delete user
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        '200':
          description: Deleted succsessfully
          schema:
            type: string
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
definitions:
  user:
    type: object
    properties:
      id:
        type: string
        example: 0
      username:
        type: string
        example: nam123
        pattern: "[A-Za-z0-9_]+"
      password:
        type: string
        example: 123456
      email:
        type: string
        format: email
        example: nam123@gmail.com
      firstName:
        type: string
        example: Nam
      lastName:
        type: string
        example: Nguyen
      dob:
        type: string
        format: date
        example: '1996-03-16'
#      deleted:
#        type: boolean
#        example: false
      role:
        type: string
        example: BORROWER
      # role:
      #   type: string
      #   enum:
      #     - ADMIN
      #     - BORROWER
      #   example: BORROWER
